from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from config import MAIN_BOT_TOKEN, SUPPORTED_PAIRS
from arbitrage import ArbitrageBot
from ml_model import ArbitragePredictor
import logging
import os
import asyncio

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É logs, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
if not os.path.exists('logs'):
    os.makedirs('logs')

logging.basicConfig(filename='logs/main_bot.log', level=logging.INFO, encoding='utf-8')

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
monitoring_users = set()

async def start(update, context):
    await update.message.reply_text("–í—ñ—Ç–∞—é! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /arbitrage –¥–ª—è –ø–æ—à—É–∫—É –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞–±–æ /monitor –¥–ª—è –∞–≤—Ç–æ—Å–ø–æ–≤—ñ—â–µ–Ω—å.")
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")

async def arbitrage(update, context):
    keyboard = [
        [InlineKeyboardButton("–ú—ñ–∂–±—ñ—Ä–∂–æ–≤–∏–π", callback_data='inter')],
        [InlineKeyboardButton("–í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–±—ñ—Ä–∂–æ–≤–∏–π", callback_data='intra')],
        [InlineKeyboardButton("P2P", callback_data='p2p')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞—Ä–±—ñ—Ç—Ä–∞–∂—É:", reply_markup=reply_markup)
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /arbitrage –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")

async def monitor(update, context):
    user_id = update.effective_user.id
    if user_id not in monitoring_users:
        monitoring_users.add(user_id)
        await update.message.reply_text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É–≤—ñ–º–∫–Ω–µ–Ω–æ! –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É—Ç—å—Å—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω.")
        logging.info(f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    else:
        monitoring_users.remove(user_id)
        await update.message.reply_text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ.")
        logging.info(f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

async def handle_arbitrage_type(update, context):
    query = update.callback_query
    arbitrage_type = query.data
    user_id = query.from_user.id
    bot = ArbitrageBot()
    predictor = ArbitragePredictor()
    response = f"üìä {arbitrage_type.upper()} –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ\n\n"
    try:
        if arbitrage_type == 'inter':
            for symbol in SUPPORTED_PAIRS:
                prices = await bot.fetch_prices(symbol)
                inter_ops = await bot.calculate_inter_exchange_arbitrage(symbol, amount=1)
                for op in inter_ops[:3]:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AI-–ø—Ä–æ–≥–Ω–æ–∑
                    buy_data = prices.get(op['buy_exchange'], {})
                    sell_data = prices.get(op['sell_exchange'], {})
                    buy_pred = predictor.is_profitable(op['buy_exchange'], symbol, buy_data) if buy_data else False
                    sell_pred = predictor.is_profitable(op['sell_exchange'], symbol, sell_data) if sell_data else False
                    if buy_pred or sell_pred:
                        response += (f"–ö—É–ø–∏—Ç–∏ –Ω–∞ {op['buy_exchange']} –∑–∞ {op['buy_price']:.2f} USDT\n"
                                     f"–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞ {op['sell_exchange']} –∑–∞ {op['sell_price']:.2f} USDT\n"
                                     f"–ü—Ä–∏–±—É—Ç–æ–∫: {op['profit']:.2f} USDT ({op['profit_percent']:.2f}%) [AI —Ä–µ–∫–æ–º–µ–Ω–¥—É—î]\n\n")
                    else:
                        response += (f"–ö—É–ø–∏—Ç–∏ –Ω–∞ {op['buy_exchange']} –∑–∞ {op['buy_price']:.2f} USDT\n"
                                     f"–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞ {op['sell_exchange']} –∑–∞ {op['sell_price']:.2f} USDT\n"
                                     f"–ü—Ä–∏–±—É—Ç–æ–∫: {op['profit']:.2f} USDT ({op['profit_percent']:.2f}%)\n\n")

        elif arbitrage_type == 'intra':
            for ex in ['binance', 'bybit', 'okx', 'kraken', 'kucoin']:
                intra_ops = await bot.calculate_intra_exchange_arbitrage(ex, [symbol, 'ETH/USDT', 'BTC/ETH'])
                if intra_ops:
                    response += f"üîÑ –í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–±—ñ—Ä–∂–æ–≤–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ ({ex.capitalize()}):\n"
                    for op in intra_ops:
                        response += (f"–®–ª—è—Ö: {op['path']}\n"
                                     f"–ü—Ä–∏–±—É—Ç–æ–∫: {op['profit']:.2f} BTC ({op['profit_percent']:.2f}%)\n\n")

        elif arbitrage_type == 'p2p':
            p2p_ops = await bot.calculate_p2p_arbitrage(crypto='USDT', fiat='UAH', amount=10000)
            if p2p_ops:
                response += "üîÑ P2P –∞—Ä–±—ñ—Ç—Ä–∞–∂ (USDT/UAH):\n"
                for op in p2p_ops[:3]:
                    response += (f"–ö—É–ø–∏—Ç–∏ –Ω–∞ {op['buy_exchange']} –∑–∞ {op['buy_price']:.2f} UAH\n"
                                 f"–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞ {op['sell_exchange']} –∑–∞ {op['sell_price']:.2f} UAH\n"
                                 f"–ü—Ä–∏–±—É—Ç–æ–∫: {op['profit']:.2f} UAH ({op['profit_percent']:.2f}%)\n\n")

        if response == f"üìä {arbitrage_type.upper()} –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ\n\n":
            response = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π."
        await query.message.reply_text(response)
        logging.info(f"–û–±—Ä–æ–±–ª–µ–Ω–æ {arbitrage_type} –∞—Ä–±—ñ—Ç—Ä–∞–∂ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {arbitrage_type}: {e}")
        await query.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        await bot.close_exchanges()

async def monitor_arbitrage(context):
    bot = ArbitrageBot()
    predictor = ArbitragePredictor()
    while True:
        response = "üìä –ù–æ–≤—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ\n\n"
        try:
            for symbol in SUPPORTED_PAIRS:
                prices = await bot.fetch_prices(symbol)
                inter_ops = await bot.calculate_inter_exchange_arbitrage(symbol, amount=1)
                if inter_ops and inter_ops[0]['profit_percent'] > 1:
                    buy_data = prices.get(inter_ops[0]['buy_exchange'], {})
                    sell_data = prices.get(inter_ops[0]['sell_exchange'], {})
                    buy_pred = predictor.is_profitable(inter_ops[0]['buy_exchange'], symbol, buy_data) if buy_data else False
                    sell_pred = predictor.is_profitable(inter_ops[0]['sell_exchange'], symbol, sell_data) if sell_data else False
                    response += f"üîÑ –ú—ñ–∂–±—ñ—Ä–∂–æ–≤–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ ({symbol}):\n"
                    for op in inter_ops[:1]:
                        response += (f"–ö—É–ø–∏—Ç–∏ –Ω–∞ {op['buy_exchange']} –∑–∞ {op['buy_price']:.2f} USDT\n"
                                     f"–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞ {op['sell_exchange']} –∑–∞ {op['sell_price']:.2f} USDT\n"
                                     f"–ü—Ä–∏–±—É—Ç–æ–∫: {op['profit']:.2f} USDT ({op['profit_percent']:.2f}%)\n"
                                     f"[AI —Ä–µ–∫–æ–º–µ–Ω–¥—É—î]\n\n" if buy_pred or sell_pred else "\n\n")

                for ex in ['binance', 'bybit', 'okx', 'kraken', 'kucoin']:
                    intra_ops = await bot.calculate_intra_exchange_arbitrage(ex, [symbol, 'ETH/USDT', 'BTC/ETH'])
                    if intra_ops and intra_ops[0]['profit_percent'] > 1:
                        response += f"üîÑ –í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–±—ñ—Ä–∂–æ–≤–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂ ({ex.capitalize()}):\n"
                        for op in intra_ops[:1]:
                            response += (f"–®–ª—è—Ö: {op['path']}\n"
                                         f"–ü—Ä–∏–±—É—Ç–æ–∫: {op['profit']:.2f} BTC ({op['profit_percent']:.2f}%)\n\n")

                p2p_ops = await bot.calculate_p2p_arbitrage(crypto='USDT', fiat='UAH', amount=10000)
                if p2p_ops and p2p_ops[0]['profit_percent'] > 1:
                    response += "üîÑ P2P –∞—Ä–±—ñ—Ç—Ä–∞–∂ (USDT/UAH):\n"
                    for op in p2p_ops[:1]:
                        response += (f"–ö—É–ø–∏—Ç–∏ –Ω–∞ {op['buy_exchange']} –∑–∞ {op['buy_price']:.2f} UAH\n"
                                     f"–ü—Ä–æ–¥–∞—Ç–∏ –Ω–∞ {op['sell_exchange']} –∑–∞ {op['sell_price']:.2f} UAH\n"
                                     f"–ü—Ä–∏–±—É—Ç–æ–∫: {op['profit']:.2f} UAH ({op['profit_percent']:.2f}%)\n\n")

            if response != "üìä –ù–æ–≤—ñ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ\n\n" and monitoring_users:
                for user_id in monitoring_users:
                    await context.bot.send_message(chat_id=user_id, text=response)
                    logging.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
            else:
                logging.info("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
        finally:
            await bot.close_exchanges()
        await asyncio.sleep(300)  # –ß–µ–∫–∞—Ç–∏ 5 —Ö–≤–∏–ª–∏–Ω

def main():
    try:
        app = Application.builder().token(MAIN_BOT_TOKEN).read_timeout(30).write_timeout(30).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("arbitrage", arbitrage))
        app.add_handler(CommandHandler("monitor", monitor))
        app.add_handler(CallbackQueryHandler(handle_arbitrage_type))
        app.job_queue.run_repeating(monitor_arbitrage, interval=300, first=10)
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
        app.run_polling()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()